@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager


<MudContainer Fixed="true" Style="@style" >
    <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center" Style="height: 100%">
        <TrackInfo Track="track"></TrackInfo>
        <Wave Color="@color" Levels="levels"></Wave>
    </MudStack>
</MudContainer>

@code {
    private TrackDto? track;
    private string color;
    private HubConnection? hubConnection;
    private IEnumerable<double>? levels = new List<double>();
    private string style;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/trackhub")).Build();

        hubConnection.On<TrackDto>("TrackChange", OnTrackChange);

        await hubConnection.StartAsync();
    }

    private void OnTrackChange(TrackDto newTrack)
    {
        track = newTrack;
        color = newTrack.RGBColor;
        levels = newTrack.Levels;
        style = $"background: linear-gradient(to top, rgba({color}, 0.5) 0%, rgba({color}, 0) 100%);";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Connect();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}